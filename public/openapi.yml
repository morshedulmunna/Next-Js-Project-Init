openapi: 3.1.0
info:
  title: Authentication API
  description: API for user authentication, including signup, login, token refresh, and logout.
  version: 1.0.0

servers:
  - url: https://api.example.com
    description: Production Server
  - url: http://localhost:5000
    description: Development Server

paths:
  /auth/signup:
    post:
      summary: User registration
      operationId: signUp
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Invalid request data
        "409":
          description: Email already exists

  /auth/login:
    post:
      summary: User login
      operationId: login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Invalid credentials

  /auth/refresh:
    post:
      summary: Refresh access token
      operationId: refreshToken
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshRequest"
      responses:
        "200":
          description: New access token generated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "403":
          description: Invalid or expired refresh token

  /auth/logout:
    post:
      summary: Logout user
      operationId: logout
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully logged out
        "401":
          description: Unauthorized

components:
  schemas:
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - fullName
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "StrongPassword123!"
        fullName:
          type: string
          example: "John Doe"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "StrongPassword123!"

    RefreshRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: "#/components/schemas/User"

    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    User:
      type: object
      properties:
        id:
          type: string
          example: "uuid-1234-5678"
        email:
          type: string
          format: email
          example: "user@example.com"
        fullName:
          type: string
          example: "John Doe"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT